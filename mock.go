// Code generated by MockGen. DO NOT EDIT.
// Source: cptx.go

// Package cptx is a generated GoMock package.
package cptx

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockConnections is a mock of Connections interface
type MockConnections struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionsMockRecorder
}

// MockConnectionsMockRecorder is the mock recorder for MockConnections
type MockConnectionsMockRecorder struct {
	mock *MockConnections
}

// NewMockConnections creates a new mock instance
func NewMockConnections(ctrl *gomock.Controller) *MockConnections {
	mock := &MockConnections{ctrl: ctrl}
	mock.recorder = &MockConnectionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnections) EXPECT() *MockConnectionsMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockConnections) Open() (Database, Transaction) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(Database)
	ret1, _ := ret[1].(Transaction)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockConnectionsMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockConnections)(nil).Open))
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Main mocks base method
func (m *MockDatabase) Main() MainDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Main")
	ret0, _ := ret[0].(MainDB)
	return ret0
}

// Main indicates an expected call of Main
func (mr *MockDatabaseMockRecorder) Main() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Main", reflect.TypeOf((*MockDatabase)(nil).Main))
}

// Replica mocks base method
func (m *MockDatabase) Replica() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replica")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// Replica indicates an expected call of Replica
func (mr *MockDatabaseMockRecorder) Replica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replica", reflect.TypeOf((*MockDatabase)(nil).Replica))
}

// MockMainDB is a mock of MainDB interface
type MockMainDB struct {
	ctrl     *gomock.Controller
	recorder *MockMainDBMockRecorder
}

// MockMainDBMockRecorder is the mock recorder for MockMainDB
type MockMainDBMockRecorder struct {
	mock *MockMainDB
}

// NewMockMainDB creates a new mock instance
func NewMockMainDB(ctrl *gomock.Controller) *MockMainDB {
	mock := &MockMainDB{ctrl: ctrl}
	mock.recorder = &MockMainDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMainDB) EXPECT() *MockMainDBMockRecorder {
	return m.recorder
}

// ExecuteMustTx mocks base method
func (m *MockMainDB) ExecuteMustTx(ctx context.Context, query string, params map[string]interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteMustTx", ctx, query, params)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteMustTx indicates an expected call of ExecuteMustTx
func (mr *MockMainDBMockRecorder) ExecuteMustTx(ctx, query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteMustTx", reflect.TypeOf((*MockMainDB)(nil).ExecuteMustTx), ctx, query, params)
}

// QueryRowMustTx mocks base method
func (m *MockMainDB) QueryRowMustTx(ctx context.Context, query string, params map[string]interface{}, scans ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query, params}
	for _, a := range scans {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowMustTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRowMustTx indicates an expected call of QueryRowMustTx
func (mr *MockMainDBMockRecorder) QueryRowMustTx(ctx, query, params interface{}, scans ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query, params}, scans...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowMustTx", reflect.TypeOf((*MockMainDB)(nil).QueryRowMustTx), varargs...)
}

// Execute mocks base method
func (m *MockMainDB) Execute(ctx context.Context, query string, params map[string]interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, query, params)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockMainDBMockRecorder) Execute(ctx, query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockMainDB)(nil).Execute), ctx, query, params)
}

// QueryRow mocks base method
func (m *MockMainDB) QueryRow(ctx context.Context, query string, params map[string]interface{}, scans ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query, params}
	for _, a := range scans {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockMainDBMockRecorder) QueryRow(ctx, query, params interface{}, scans ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query, params}, scans...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockMainDB)(nil).QueryRow), varargs...)
}

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockTransaction) Begin(ctx *context.Context) (Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockTransactionMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTransaction)(nil).Begin), ctx)
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// Rollback mocks base method
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}
